<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Cartesian_Product_of_Two_Datasets" role="nobrk">
  <title>Produto Cartesiano de Dois Datasets</title>

  <para>Um produto cartesiano é o produto de dois conjuntos não-vazios na
  forma de pares ordenados. Como exemplo, se pegarmos um conjunto de valores
  (A, B e C) e um segundo conjunto de valores (1, 2 e 3), o produto cartesiano
  desses dois conjuntos seria o conjunto de pares ordenados A1, A2, A3, B1,
  B2, B3, C1, C2 e C3.</para>

  <para>Para produzir esse tipo de resultado de qualquer um dos dois datasets
  de entrada, o código ECL seria algo parecido com (contido em
  Cartesian.ECL):</para>

  <programlisting>OutFile1 := '~PROGGUIDE::OUT::CP1';

rec := RECORD
  STRING1 Letter;
END;
Inds1 := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},
                  {'F'},{'G'},{'H'},{'I'},{'J'},
                  {'K'},{'L'},{'M'},{'N'},{'O'},
                  {'P'},{'Q'},{'R'},{'S'},{'T'},
                  {'U'},{'V'},{'W'},{'X'},{'Y'}],
                 rec);

Inds2 := DATASET([{'A'},{'B'},{'C'},{'D'},{'E'},
                  {'F'},{'G'},{'H'},{'I'},{'J'},
                  {'K'},{'L'},{'M'},{'N'},{'O'},
                  {'P'},{'Q'},{'R'},{'S'},{'T'},
                  {'U'},{'V'},{'W'},{'X'},{'Y'}],
                 rec);

CntInDS2 := COUNT(Inds2);
SetInDS2 := SET(inds2,letter);
outrec := RECORD
  STRING1 LeftLetter;
  STRING1 RightLetter;
END;

outrec CartProd(rec L, INTEGER C) := TRANSFORM
  SELF.LeftLetter := L.Letter;
  SELF.RightLetter := SetInDS2[C];
END;

//Run the small datasets
CP1 := NORMALIZE(Inds1,CntInDS2,CartProd(LEFT,COUNTER));
OUTPUT(CP1,,OutFile1,OVERWRITE);
</programlisting>

  <para>A estrutura principal desse código é o NORMALIZE que vai gerar o
  produto cartesiano. Os dois datasets de entrada possuem vinte e cinco
  registros cada, de forma que o número de registros resultantes será
  seiscentos e vinte e cinco (vinte e cinco ao quadrado).</para>

  <para>Cada registro no dataset de entrada LEFT do NORMALIZE executará o
  TRANSFORM uma vez para cada entrada no SET de valores. Tornar os valores um
  SET é o segredo para permitir que o NORMALIZE realize esta operação – caso
  contrário, seria necessário realizar um JOIN onde a condição de combinação é
  a palavra-chave TRUE para realizar essa tarefa. No entanto, ao testar isso
  com datasets dimensionáveis (como na próxima instância do código abaixo), a
  versão NORMALIZE era aproximadamente 25% mais rápida do que o uso do JOIN.
  Se houver mais de um campo, múltiplos SETs podem então ser definidos e o
  processo continua o mesmo.</para>

  <para>Esse próximo exemplo realiza a mesma operação acima, mas gera
  primeiramente dois datasets dimensionáveis para trabalhar (também contidos
  em Cartesian.ECL):</para>

  <programlisting>InFile1 := '~PROGGUIDE::IN::CP1';
InFile2 := '~PROGGUIDE::IN::CP2';
OutFile2 := '~PROGGUIDE::OUT::CP2';

//generate data files
rec BuildFile(rec L, INTEGER C) := TRANSFORM
  SELF.Letter := Inds2[C].Letter;
END;

GenCP1 := NORMALIZE(InDS1,CntInDS2,BuildFile(LEFT,COUNTER));
GenCP2 := NORMALIZE(GenCP1,CntInDS2,BuildFile(LEFT,COUNTER));
GenCP3 := NORMALIZE(GenCP2,CntInDS2,BuildFile(LEFT,COUNTER));

Out1 := OUTPUT(DISTRIBUTE(GenCP3,RANDOM()),,InFile1,OVERWRITE);
Out2 := OUTPUT(DISTRIBUTE(GenCP2,RANDOM()),,InFile2,OVERWRITE);

// Use the generated datasets in a cartesian join:

ds1 := DATASET(InFile1,rec,thor);
ds2 := DATASET(InFile2,rec,thor);

CntDS2 := COUNT(ds2);
SetDS2 := SET(ds2,letter);

CP2  := NORMALIZE(ds1,CntDS2,CartProd(LEFT,COUNTER));
Out3 := OUTPUT(CP2,,OutFile2,OVERWRITE);
SEQUENTIAL(Out1,Out2,Out3) </programlisting>

  <para>Neste caso, o uso de NORMALIZE para gerar os datasets é o mesmo tipo
  de uso previamente descrito no artigo "Como criar dados de exemplo". Depois
  disso, o processo para chegar ao produto cartesiano é exatamente o mesmo que
  o do exemplo anterior.</para>

  <para>Aqui está um exemplo de como essa mesma operação pode ser feita usando
  JOIN (também contido no Cartesian.ECL):</para>

  <programlisting>// outrec joinEm(rec L, rec R) := TRANSFORM
    // SELF.LeftLetter := L.Letter;
    // SELF.RightLetter := R.Letter;
// END;

// ds4 := JOIN(ds1, ds2, TRUE, joinEM(LEFT, RIGHT), ALL);
// OUTPUT(ds4);
</programlisting>
</sect1>
