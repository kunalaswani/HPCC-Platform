<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Roxie_Overview">
  <title><emphasis role="bold">Visão geral do Roxie</emphasis></title>

  <para><emphasis>Vamos começar com algumas definições:</emphasis></para>

  <para><informaltable colsep="0" frame="none" rowsep="0">
      <tgroup cols="2">
        <colspec align="left" colwidth="87.45pt" />

        <colspec />

        <tbody>
          <row>
            <entry>Refinaria de Dados</entry>

            <entry>Um cluster de supercomputador projetado especificamente para realizar processos através da manipulação de uma quantidade enorme de dados (ETL). Essa é uma ferramenta de preparo de dados de back-office e não é voltada para consultas em nível de produção para o usuário final. Consulte a Referência da Refinaria de Dados para acessar a documentação completa.</entry>
          </row>

          <row>
            <entry>Rapid Data Delivery Engine (Motor de Entrega Rápida de Dados)</entry>

            <entry>Um cluster de supercomputador projetado especificamente para atender consultas padrão, proporcionando uma taxa de produção de mais de mil respostas por segundo (a taxa de respostas real para qualquer consulta depende, obviamente, de sua complexidade). Essa é uma ferramenta de nível de produção projetada para aplicações de missão crítica. Consulte a referência Motor de entrega rápida de dados para obter a documentação completa.</entry>
          </row>

          <row>
            <entry>Data Delivery Engine (O Motor de Entrega de Dados)</entry>

            <entry>Uma plataforma de P&amp;D projetada para desenvolvimento interativo e iterativo e testes de consultas Roxie. Esse não é um cluster de supercomputador separado, mas uma implementação "acumulada" do ECL Agent e Thor. Consulte a referência do Motor de entrega de dados para obter a documentação completa.</entry>
          </row>

          <row>
            <entry>Thor</entry>

            <entry>O nome normalmente usado para uma instância do componente da Refinaria de dados da plataforma HPCC.</entry>
          </row>

          <row>
            <entry>Roxie</entry>

            <entry>O nome normalmente usado para uma instância do componente de Motor de entrega rápida de dados da plataforma HPCC.</entry>
          </row>

          <row>
            <entry>hThor</entry>

            <entry>O nome normalmente usado para uma instância do componente de motor de entrega de dados da plataforma HPCC.</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable></para>

  <sect2 id="Thor">
    <title>Thor</title>

    <para>Os clusters Thor são usados para realizar todo o trabalho de preparo "pesado" do dados para processar os dados brutos em formatos padrão. Após a conclusão deste processo, os usuários finais podem consultar esses dados padronizados para recolher informações reais. No entanto, usuários finais normalmente querem esses resultados "imediatamente ou para ontem" – e normalmente mais de um usuário final quer o resultado ao mesmo tempo. A plataforma Thor só funciona em uma consulta por vez, o que a torna seu uso impraticável por usuários finais, e é essa a razão pela qual a plataforma Roxie foi criada.</para>
  </sect2>

  <sect2 id="Roxie">
    <title>Roxie</title>

    <para>Clusters Roxie podem processar milhares de usuários finais simultaneamente e proporcionar a todos eles a percepção dos resultados que desejam obter "imediatamente ou para ontem". Eles fazem isso ao permitir que os usuários finais executem apenas consultas padrão e pré-compiladas que tenham sido desenvolvidas especificamente para serem usadas pelo usuário final no cluster Roxie. Normalmente, essas consultas usam índices e, dessa forma, oferecem um desempenho extremamente rápido. No entanto, usar o cluster Roxie como uma ferramenta de desenvolvimento é impraticável, já que todas as suas consultas precisam ser pré-compiladas e os dados usados precisam ter sido previamente implementados. Dessa forma, o processo de testes e desenvolvimento de consultas é realizado usando o Doxie.</para>
  </sect2>

  <sect2 id="Doxie">
    <title>hThor</title>

    <para>hThor não é um cluster independente, mas uma instância do ECL Agent (que opera em um servidor único) que emula a operação de um cluster Roxie. Assim como as consultas Thor, as consultas hThor são compiladas a cada execução.  Essas consultas acessam os dados diretamente a partir dos discos de um cluster Thor sem interferir nas operações do Thor. Isso faz dele uma ferramenta adequada para criar consultas voltadas para uso em um cluster Roxie.</para>
  </sect2>

  <sect2 id="How_to_Structure_Roxie_Queries">
    <title>Como desenvolver Consultas Roxie</title>

    <para>Para começar a criar consultas para uso em clusters Roxie, o primeiro passo é decidir que dados consultar e como indexar esses dados para que usuários finais vejam seu resultado em tempo mínimo. O processo de colocação dos dados em sua forma mais útil e de indexação é realizado em um cluster Thor. Os artigos anteriores sobre indexação e superarquivos deverão orientá-lo sobre como fazer isso.</para>

    <para>Depois que os dados estão prontos para uso, é possível criar sua consulta. As consultas para clusters Roxie estão sempre contidas em estruturas MACRO, e essas MACROs contêm no mínimo uma ação – normalmente, uma OUTPUT simples para retornar o conjunto de resultados.</para>

    <para>Diferentemente das MACROs usadas para gerar o código ECL para para os processos padrão do Thor, as MACROs das consultas Roxie não recebem parâmetros. Em vez disso, a interface SOAP (Protocolo Simples de Acesso a Objetos) é usada para "especificar" os valores de dados (o artigo  <emphasis>MACROs habilitadas por SOAP</emphasis>  discute os detalhes específicos dessa interface). Os valores especificados pela interface SOAP se resumem em atributos que foram definidos no serviço de fluxo de trabalho STORED. Seu código ECL pode então usar esses atributos para determinar os valores especificados e retornar o resultado adequado para o usuário final.</para>

    <para>Aqui está um exemplo simples de uma estrutura de consulta Roxie (contida no arquivo RoxieOverview1.ECL):</para>

    <programlisting>/*--SOAP-- &lt;message name="PeopleSearchService"&gt; &lt;part name="LastName" type="xsd:string" required="1"/&gt; &lt;part name="FirstName" type="xsd:string"/&gt; &lt;/message&gt; */ EXPORT PeopleSearchService() := MACRO STRING30 lname_value := '' : STORED('LastName'); STRING30 fname_value := '' : STORED('FirstName'); IDX := ProgGuide.IDX__Person_LastName_FirstName; Base := ProgGuide.Person.FilePlus; Fetched := IF(fname_value = '', FETCH(Base,IDX(LastName=lname_value),RIGHT.RecPos), FETCH(Base,IDX(LastName=lname_value, FirstName=fname_value),RIGHT.RecPos)); OUTPUT(CHOOSEN(Fetched,2000)) ENDMACRO;</programlisting>

    <para>O bloco de comentário contém o XML que define a interface SOAP para o serviço. Por ser um bloco de comentário, isso não afeta o código ECL de maneira alguma, mas é necessário.</para>

    <para>Observe que MACRO não recebe parâmetros Em vez disso, os atributos lname_value e fname_value possuem o serviço de fluxo de trabalho STORED e seus nomes de armazenamento combinam exatamente com o nome da parte no XML. A interface SOAP exige que todos os nomes das partes correspondam exatamente com os nomes dos atributos STORED, uma vez que a opção STORED abre um espaço de armazenamento na tarefa onde a interface SOAP pode colocar os valores a serem especificados para o serviço.</para>

    <para>Esse código usa a função FETCH por ser o exemplo mais simples do uso de um INDEX no ECL. Geralmente, as consultas Roxie usam operações JOIN de meia chave com chaves de conteúdo (o artigo  <emphasis>Consultas Roxie Complexas</emphasis>  aborda esse problema). Note que o OUTPUT possui CHOOSEN, um exemplo simples de como se certificar de que é preciso limitar a quantidade máxima de dados que pode ser retornada da consulta para uma quantidade "cabível" – não faz tanto sentido ter uma consulta Roxie que possa acabar retornando 10 bilhões de registros para o PC de um usuário final (qualquer um que realmente precise de tantos dados deve usar o Thor, e não o Roxie).</para>
  </sect2>

  <sect2 id="Testing_Queries_with_Doxie">
    <title>Testando consultas com o Doxie</title>

    <para>Depois de gravar sua consulta, você, naturalmente, vai querer testá-la. É aí que o Doxie entra em cena. O Doxie é um sistema de testes interativos que você pode usar antes de implementar suas consultas para o Roxie. A maneira mais fácil de descrever o processo é acompanhá-lo usando essa consulta simples como exemplo.</para>

    <para>► Em seu repositório, crie um módulo chamado  <emphasis
    role="bold">Training_ProgGuide</emphasis></para>

    <para>► Insira um atributo denominado  <emphasis
    role="bold">PeopleSearchService</emphasis></para>

    <para>► Copie todo o código para o arquivo RoxieOverview.ECL para esse atributo, substituindo o texto de ponto de partida padrão</para>

    <para>► Salve a definição do atributo</para>

    <para>Agora que você salvou essa consulta, já está pronto para executá-la no Doxie.</para>

    <para>Você pode localizar o IP e a porta para o Doxie do ambiente abrindo a página da Web do ECL Watch (não use o QueryBuilder, abra no Internet Explorer).</para>

    <para>► Clique em  <emphasis role="underline">Servidores do Sistema</emphasis>
    (na seção Topologia)</para>

    <para>► Localize a seção  <emphasis role="bold">ESP Servers</emphasis>
    </para>

    <para>Pode haver diversos servidores listados aqui, por isso selecione aquele aplicável ao seu Thor (não aquele para o Roxie – vamos tratar disso mais tarde).</para>

    <para>► Note o IP listado ao lado dele (esse é frequentemente o mesmo IP do ECL Watch)</para>

    <para>► Clique no link do nome do ESP Server para exibir sua lista de serviços e suas portas</para>

    <para>► Note o número de porta ao lado do tipo de serviço  <emphasis
    role="bold">wsecl</emphasis>  (normalmente é 8002, mas pode ser definida para um valor diferente)</para>

    <para>Após ter descoberto o IP e a porta do Doxie, é possível acessar e executar a consulta.</para>

    <para>► Edite a barra de endereços do Internet Explorer para o direcionar para IP:port do Doxie</para>

    <para>► Pressione a tecla Enter</para>

    <para>Uma caixa de login será exibida – seu ID e senha são os mesmos usados no programa QueryBuilder. Depois de fazer o login, será exibida uma lista de módulos à esquerda.</para>

    <para>► Clique no link  <emphasis
    role="underline">Training_ProgGuide</emphasis> .</para>

    <para>Uma lista contendo todos os atributos habilitados para SOAP (conhecidos como consultas Roxie) que estão neste módulo aparece no quadro à direita. No nosso caso, há apenas uma.</para>

    <para>► Clique no  <emphasis
    role="underline">link</emphasis>  PeopleSearchService</para>

    <para>. Uma página web será exibida contendo dois controles de entrada e um botão  <emphasis
    role="bold">Submit</emphasis> .</para>

    <para>► Digite um sobrenome do grupo de sobrenomes usado pelo código no GenData.ECL para gerar os arquivos de dados para este 
    <emphasis>Guia do Programador  </emphasis></para>

    <para>COOLING é um bom exemplo para ser utilizado. Observe que por se tratar de um exemplo extremamente simples, será necessário digitá-lo em totalmente caixa alta ALL CAPS; caso contrário, FETCH irá falhar ao tentar localizar os registros correspondentes (isso se deve apenas à simplicidade desse código ECL e não a alguma falta inerente no sistema).</para>

    <para>► Pressione o botão <emphasis role="bold">Submit</emphasis> .</para>

    <para>Consultas Doxie são recompiladas toda vez que executadas, por isso, após alguns segundos, você deve ver um conjunto de resultado com 1.000 registros nela.</para>

    <para>O bloco de comentário SOAP localizado no topo do código ECL contém o XML que define os valores de dados que podem ser especificados para a consulta. Esse XML é processado através de modelos padrão XSLT para formatar a página de entrada de dados (e a página de resultados) para esse serviço. Esses modelos XSLT padrão podem ser substituídos, mas funcionam muito bem para fins de testes e depuração.</para>
  </sect2>

  <sect2 id="Deploying_Queries_to_Roxie">
    <title>Implantando Consultas para Roxie</title>

    <para>Depois de ter realizado testes suficientes no Doxie, para garantir que a consulta funciona como o esperado, o único passo necessário é implementá-la e testá-la também no Roxie (apenas para estar totalmente seguro de que tudo está funcionando da maneira correta). Após ter realizado o teste no Roxie, é possível informar aos usuários que a consulta está disponível para uso.</para>

    <para>O processo de implementação do Roxie é totalmente documentado no 
    <emphasis>Rapid Data Delivery Engine Reference (Motor de entrega rápida de dados)</emphasis>. A implementação interativa é feita através de uma página da Web similar ao ECL Watch. O IP e a porta desta página podem ser encontrados na página de Servidores de Sistema do ECL Watch, listada no ESP Server do Roxie. O serviço que deve ser localizado é  <emphasis
    role="bold">ws_roxieconfig</emphasis>. Vá para esse IP e porta, faça login e siga o processo de implementação descrito na referência do  <emphasis>Rapid Data Delivery Engine Reference (Motor de entrega rápida de dados)</emphasis>.</para>

    <para>Depois de implementar a consulta, é possível testá-la da mesma maneira que foi testada no Doxie ao localizar o IP a porta do serviço 
    <emphasis role="bold">wsecl</emphasis>  do ESP Server do Roxie. Depois de acessar esse endereço da Web (seguindo o mesmo processo listado acima para o Doxie) e fazer login, você verá a versão Roxie da mesma página que você acabou de usar para testar o Doxie A única diferença entre as duas é o IP e a porta, além, é claro, da velocidade de execução da consulta Roxie em relação à versão Doxie (o tempo de resposta do Roxie deve ser MUITO MUCH mais rápido).</para>
  </sect2>

  <sect2 id="Restrictions">
    <title>Restrições</title>

    <para>As consultas Roxie podem  <emphasis role="underline">não</emphasis>  conter nenhum código que grava um arquivo em disco, como:</para>

    <para>Ações OUTPUT que gravam arquivos em disco ações BUILD (ou BUILDINDEX) atributos PERSISTed</para>

    <para></para>
  </sect2>
</sect1>
